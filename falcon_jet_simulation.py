# -*- coding: utf-8 -*-
"""Falcon_Jet_Simulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11bYDGIt6Bl1ZiSP8n_5FM3-KPsHlLlji
"""

import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

# Number of fighters
num_fighters = 5
fighter_labels = [f'Falcon #{i+1}' for i in range(num_fighters)]

#  Initial positions as FLOAT arrays
start_x = np.full(num_fighters, -5.0, dtype=float)
start_y = np.array([8, 4, 0, -4, -8], dtype=float)

fighters_x = start_x.copy()
fighters_y = start_y.copy()

enemy_x_start = 60
enemy_y = 0

fighters_launched = False
launch_delay_frames = 30
surround_start_frame = 60
intercept_start_frame = 90
return_start_frame = 110
frames_to_move = 170  # increased to show mission complete

enemy_x_current = enemy_x_start
enemy_alive = True
returning = False

fig, ax = plt.subplots()
fig.patch.set_facecolor('skyblue')
ax.set_facecolor('skyblue')

# Draw airforce base
base_rect = plt.Rectangle((-10, -12), 5, 24, fc='gray')
ax.add_patch(base_rect)
ax.text(-7.5, 13, "Airforce Base", fontsize=10, color='black', ha='center')

# Scatter plots
sc_fighters = ax.scatter([], [], color='green', s=100, label='Falcon')
sc_enemy = ax.scatter([], [], color='red', s=100, label='Enemy')

ax.legend()
ax.set_xlim(-15, 65)
ax.set_ylim(-20, 20)
ax.set_title('Airforce Base Defense Simulation')

fighter_texts = [ax.text(0, 0, label, fontsize=8, ha='center', va='bottom') for label in fighter_labels]
enemy_text = ax.text(0, 0, 'Enemy', fontsize=9, ha='center', va='bottom', color='red')

#  Add Mission Complete text placeholder
mission_text = ax.text(25, 15, '', fontsize=16, color='gold', ha='center', va='center')

combat_offsets = np.array([
    [-5, -4],  # rear left closer
    [-5, 4],   # rear right closer
    [7, 3],    # front
    [0, -9],   # side left
    [0, 9]     # side right
])

combat_x = None
combat_y = None

def update(frame):
    global fighters_x, fighters_y, fighters_launched, enemy_x_current, combat_x, combat_y, enemy_alive, returning

    # Move enemy left UNTIL surround_start_frame
    if frame < surround_start_frame:
        enemy_x_current = enemy_x_start - frame * 0.3
    else:
        enemy_x_current = enemy_x_start - surround_start_frame * 0.3  # freeze enemy

    if enemy_alive:
        sc_enemy.set_offsets([[enemy_x_current, enemy_y]])
        enemy_text.set_position((enemy_x_current, enemy_y + 1))
    else:
        sc_enemy.set_offsets([[np.nan, np.nan]])  #  hide enemy
        enemy_text.set_text('')

    if frame >= launch_delay_frames:
        if not fighters_launched:
            fighters_x[:] = start_x
            fighters_y[:] = start_y
            fighters_launched = True

        if frame < surround_start_frame:
            move_x = np.array([0, 5, 10, 5, 0], dtype=float)
            fighters_x[:] = start_x + (frame - launch_delay_frames) * 0.5 + move_x
        elif frame < intercept_start_frame:
            if combat_x is None:
                combat_x = enemy_x_current + combat_offsets[:, 0]
                combat_y = enemy_y + combat_offsets[:, 1]
            fighters_x[:] += (combat_x - fighters_x) / 20
            fighters_y[:] += (combat_y - fighters_y) / 20
        elif frame < return_start_frame:
            fighters_x[:3] += (np.array([combat_x[0], combat_x[1], enemy_x_current], dtype=float) - fighters_x[:3]) / 20
            fighters_y[:3] += (np.array([combat_y[0], combat_y[1], enemy_y], dtype=float) - fighters_y[:3]) / 20
            fighters_x[3:] += (combat_x[3:] - fighters_x[3:]) / 20
            fighters_y[3:] += (combat_y[3:] - fighters_y[3:]) / 20

            dist = np.hypot(fighters_x[2] - enemy_x_current, fighters_y[2] - enemy_y)
            if dist < 1.0:
                enemy_alive = False
        else:
            #  Return to base
            fighters_x[:] += (start_x - fighters_x) / 20
            fighters_y[:] += (start_y - fighters_y) / 20

            #  Show Mission Complete after 20 frames into return
            if frame >= return_start_frame + 20:
                mission_text.set_text('MISSION COMPLETE!')

    sc_fighters.set_offsets(np.c_[fighters_x, fighters_y])

    for text, x, y in zip(fighter_texts, fighters_x, fighters_y):
        text.set_position((x, y + 1))

    return sc_fighters, sc_enemy, *fighter_texts, enemy_text, mission_text

ani = animation.FuncAnimation(fig, update, frames=frames_to_move, interval=100, blit=True)
plt.show()